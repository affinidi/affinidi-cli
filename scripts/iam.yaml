# ~~ Linted by affinidi-service-ts. Each change is linted and the file content is updated accordingly.
# ~~
# ~~ Notes:
# ~~ 1. This file is linted and fixed/normalized on projen run.
# ~~ 2. Errors (responses with HTTP status codes equal or grater than 400) shall be configured in error-catalog.yml.
# ~~ 3. More info: https://gitlab.com/affinidi/foundational/genesis/projen/affinidi-service-ts/-/blob/main/ARCHITECTURE.md#openapi
# ~~
openapi: 3.0.3
info:
  title: Iam
  version: 1.0.0
  description: Affinidi IAM
  contact:
    name: nucleus
    email: nucleus.team@affinidi.com
servers:
  - url: /
tags:
  - name: well-known
    description: Well known endpoints
  - name: sts
    description: Secure token exchange
  - name: projects
    description: CRUD for projects
  - name: policies
    description: CRUD for authorization policies
  - name: machine-users
    description: CRUD for Machine Users
security: []
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: basic
x-amazon-apigateway-gateway-responses:
  ACCESS_DENIED:
    responseTemplates:
      application/json: $context.authorizer.errorResponse
components:
  securitySchemes:
    UserTokenAuth:
      type: apiKey
      name: authorization
      in: header
    ProjectTokenAuth:
      type: apiKey
      name: authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: >-
          arn:aws:apigateway:ap-southeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-southeast-1:792104784284:function:iam-dev-ProjectTokenAuthorizerC83BEF45-elvJgVdbp078:live-alias/invocations
        authorizerResultTtlInSeconds: 0
    ConsumerTokenAuth:
      type: apiKey
      name: authorization
      in: header
  headers: {}
  requestBodies:
    DeprecatedCreateProjectScopedToken:
      description: DeprecatedCreateProjectScopedToken
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProjectScopedTokenInput'
    CreateProjectScopedToken:
      description: CreateProjectScopedToken
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProjectScopedTokenInput'
    CreateProject:
      description: CreateProject
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProjectInput'
    AddUserToProject:
      description: AddUserToProject
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddUserToProjectInput'
    AddPrincipalToProject:
      description: AddPrincipalToProject
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddUserToProjectInput'
    DeprecatedUpdatePolicies:
      description: DeprecatedUpdatePolicies
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyDto'
    UpdatePolicies:
      description: UpdatePolicies
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyDto'
    CreateMachineUser:
      description: CreateMachineUser
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateMachineUserInput'
    UpdateMachineUser:
      description: UpdateMachineUser
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateMachineUserInput'
  responses:
    GetWellKnownJwksOK:
      description: List of JWK used by the services as JWKS
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonWebKeySetDto'
    DeprecatedCreateProjectScopedTokenOK:
      description: Created Project Scoped Tokens
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProjectScopedTokenOutput'
    CreateProjectScopedTokenOK:
      description: Created Project Scoped Tokens
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProjectScopedTokenOutput'
    WhoamiOK:
      description: User info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WhoamiDto'
    CreateProjectOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectDto'
    ListProjectOK:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectList'
    ListUsersOfProjectOK:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserList'
    ListPrincipalsOfProjectOK:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserList'
    DeprecatedGetPoliciesOK:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyDto'
    DeprecatedUpdatePoliciesOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyDto'
    GetPoliciesOK:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyDto'
    UpdatePoliciesOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyDto'
    CreateMachineUserOK:
      description: Created Machine User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MachineUserDto'
    ListMachineUserOK:
      description: List of Machine Users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MachineUserList'
    GetMachineUserOK:
      description: Machine User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MachineUserDto'
    UpdateMachineUserOK:
      description: Updated Machine User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MachineUserDto'
    GetWellKnownJwksUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    DeprecatedCreateProjectScopedTokenBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    DeprecatedCreateProjectScopedTokenUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    CreateProjectScopedTokenBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    CreateProjectScopedTokenForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PrincipalDoesNotBelongToProjectError'
    CreateProjectScopedTokenUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    WhoamiForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    WhoamiNotFoundError:
      description: NotFoundError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    WhoamiUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    CreateProjectBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    CreateProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    ListProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    AddUserToProjectBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    AddUserToProjectForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    AddUserToProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    ListUsersOfProjectBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    ListUsersOfProjectForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    ListUsersOfProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    DeleteUserFromProjectBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    DeleteUserFromProjectForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    DeleteUserFromProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    ListPrincipalsOfProjectBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    ListPrincipalsOfProjectForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    ListPrincipalsOfProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    AddPrincipalToProjectBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    AddPrincipalToProjectForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    AddPrincipalToProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    DeletePrincipalFromProjectBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    DeletePrincipalFromProjectForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    DeletePrincipalFromProjectUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    DeprecatedGetPoliciesBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    DeprecatedGetPoliciesNotFoundError:
      description: NotFoundError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    DeprecatedGetPoliciesUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    DeprecatedUpdatePoliciesBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    DeprecatedUpdatePoliciesUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    GetPoliciesBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    GetPoliciesNotFoundError:
      description: NotFoundError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    GetPoliciesUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    UpdatePoliciesBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    UpdatePoliciesUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    CreateMachineUserBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    CreateMachineUserUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    ListMachineUserBadRequestError:
      description: BadRequestError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidParameterError'
    ListMachineUserUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    GetMachineUserForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    GetMachineUserNotFoundError:
      description: NotFoundError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    GetMachineUserUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    UpdateMachineUserForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    UpdateMachineUserNotFoundError:
      description: NotFoundError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    UpdateMachineUserUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
    DeleteMachineUserForbiddenError:
      description: ForbiddenError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionForbiddenError'
    DeleteMachineUserNotFoundError:
      description: NotFoundError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    DeleteMachineUserUnexpectedError:
      description: UnexpectedError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedError'
  schemas:
    ServiceErrorResponse:
      type: object
      additionalProperties: false
      properties:
        debugId:
          type: string
          format: uuid
          description: unique id for correlating this specific error to logs
        name:
          type: string
          description: name of the error
        code:
          type: string
          description: backwards compatible Affinidi error code
        details:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              issue:
                type: string
              field:
                type: string
              value:
                type: string
              location:
                type: string
            required:
              - issue
      required:
        - debugId
        - name
        - code
    UserDto:
      type: object
      additionalProperties: false
      properties:
        principalId:
          type: string
      required:
        - principalId
    TypedPricipalId:
      type: object
      additionalProperties: false
      properties:
        principalId:
          type: string
      required:
        - principalId
    AddUserToProjectInput:
      type: object
      additionalProperties: false
      properties:
        principalId:
          type: string
        principalType:
          type: string
      required:
        - principalId
        - principalType
    CreateProjectScopedTokenInput:
      type: object
      additionalProperties: false
      properties:
        projectId:
          type: string
      required:
        - projectId
    CreateProjectScopedTokenOutput:
      type: object
      additionalProperties: false
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
        scope:
          type: string
      required:
        - accessToken
        - expiresIn
        - scope
    ProjectDto:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          description: creation date and time in ISO-8601 format, e.g. 2023-09-20T07:12:13
      required:
        - id
        - name
    CreateProjectInput:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    ProjectList:
      type: object
      additionalProperties: false
      properties:
        projects:
          items:
            $ref: '#/components/schemas/ProjectDto'
          type: array
      required:
        - projects
    UserList:
      type: object
      additionalProperties: false
      properties:
        records:
          items:
            $ref: '#/components/schemas/UserDto'
          type: array
      required:
        - records
    PolicyStatementDto:
      type: object
      additionalProperties: false
      properties:
        action:
          type: array
          items:
            type: string
        effect:
          type: string
        principal:
          type: array
          items:
            type: string
        resource:
          type: array
          items:
            type: string
      required:
        - action
        - effect
        - principal
        - resource
    WhoamiDto:
      type: object
      additionalProperties: false
      properties:
        principalId:
          type: string
      required:
        - principalId
    PolicyDto:
      type: object
      additionalProperties: false
      properties:
        principalId:
          type: string
        projectId:
          type: string
        version:
          type: string
        statement:
          type: array
          items:
            $ref: '#/components/schemas/PolicyStatementDto'
      required:
        - version
        - statement
    JsonWebKeyDto:
      type: object
      additionalProperties: false
      properties:
        kid:
          type: string
        kty:
          type: string
        'n':
          type: string
        e:
          type: string
        alg:
          type: string
        use:
          type: string
      required:
        - kid
        - kty
        - alg
        - use
    JsonWebKeySetDto:
      type: object
      additionalProperties: false
      properties:
        keys:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JsonWebKeyDto'
      required:
        - keys
    MachineUserPrivateKeyAuthenticationMethodDto:
      example: >-
        {"type": "PRIVATE_KEY", "signingAlgorithm": "RS256", "publicKeyInfo": {
        "jwks":
        {"keys":[{"use":"sig","kty":"RSA","kid":"some-kid","alg":"RS256","n":"some-n-value","e":"some-e-value"}]}
        }}
      type: object
      additionalProperties: false
      description: >-
        Private Key JWT Authentication of Client with `private_key_jwt` oAuth
        Method
      properties:
        type:
          type: string
          enum:
            - PRIVATE_KEY
        signingAlgorithm:
          type: string
          enum:
            - RS256
            - RS512
            - ES256
            - ES512
        publicKeyInfo:
          description: >-
            Corresponding Public Key Info provided either as a URL or a
            Hardcoded Object
          oneOf:
            - type: object
              additionalProperties: false
              properties:
                jwks:
                  $ref: '#/components/schemas/JsonWebKeySetDto'
              required:
                - jwks
            - type: object
              additionalProperties: false
              properties:
                jwksUri:
                  type: string
                  format: url
              required:
                - jwksUri
      required:
        - type
        - signingAlgorithm
        - publicKeyInfo
    MachineUserAuthenticationMethodDto:
      oneOf:
        - $ref: '#/components/schemas/MachineUserPrivateKeyAuthenticationMethodDto'
      description: >-
        How the Machine User will be authenticate against our Authorization
        Server
    MachineUserDto:
      type: object
      additionalProperties: false
      properties:
        id:
          description: MachineUser Id
          type: string
          format: uuid
          example: c5817ea6-8367-4458-9131-54cd2c5b9b48
        ari:
          description: MachineUser ARI
          type: string
          example: machine/c5817ea6-8367-4458-9131-54cd2c5b9b48
        ownerAri:
          description: The MachineUser owner's ARI
          type: string
          example: ari:iam:::user/2f4b3468-516f-4af3-87db-8816b0d320cc
        name:
          description: Owner defined MachineUser display name
          type: string
          example: AIV/Concierge API - affinidi-elements-iam-dev
        authenticationMethod:
          $ref: '#/components/schemas/MachineUserAuthenticationMethodDto'
        scopes:
          description: Scopes that will be assigned to the MachineUser on authentication
          type: array
          items:
            type: string
      required:
        - id
        - ari
        - ownerAri
        - name
        - authenticationMethod
        - scopes
    MachineUserList:
      type: object
      additionalProperties: false
      properties:
        machineUsers:
          items:
            $ref: '#/components/schemas/MachineUserDto'
          type: array
      required:
        - machineUsers
    CreateMachineUserInput:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: AIV/Concierge API - affinidi-elements-iam-dev
        authenticationMethod:
          $ref: '#/components/schemas/MachineUserAuthenticationMethodDto'
      required:
        - name
        - authenticationMethod
    UpdateMachineUserInput:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: AIV/Concierge API - affinidi-elements-iam-dev
        authenticationMethod:
          $ref: '#/components/schemas/MachineUserAuthenticationMethodDto'
      required:
        - name
        - authenticationMethod
    UnexpectedError:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          enum:
            - UnexpectedError
        message:
          type: string
          enum:
            - Unexpected Error Occurred.
        httpStatusCode:
          type: number
          enum:
            - 500
        traceId:
          type: string
        details:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              issue:
                type: string
              field:
                type: string
              value:
                type: string
              location:
                type: string
            required:
              - issue
      required:
        - name
        - message
        - httpStatusCode
        - traceId
    InvalidParameterError:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          enum:
            - InvalidParameterError
        message:
          type: string
          enum:
            - 'Invalid parameter: ${param}.'
        httpStatusCode:
          type: number
          enum:
            - 400
        traceId:
          type: string
        details:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              issue:
                type: string
              field:
                type: string
              value:
                type: string
              location:
                type: string
            required:
              - issue
      required:
        - name
        - message
        - httpStatusCode
        - traceId
    NotFoundError:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          enum:
            - NotFoundError
        message:
          type: string
          enum:
            - 'Not found: ${param}.'
        httpStatusCode:
          type: number
          enum:
            - 404
        traceId:
          type: string
        details:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              issue:
                type: string
              field:
                type: string
              value:
                type: string
              location:
                type: string
            required:
              - issue
      required:
        - name
        - message
        - httpStatusCode
        - traceId
    PrincipalDoesNotBelongToProjectError:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          enum:
            - PrincipalDoesNotBelongToProjectError
        message:
          type: string
          enum:
            - Principal does not belong to the given project
        httpStatusCode:
          type: number
          enum:
            - 403
        traceId:
          type: string
        details:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              issue:
                type: string
              field:
                type: string
              value:
                type: string
              location:
                type: string
            required:
              - issue
      required:
        - name
        - message
        - httpStatusCode
        - traceId
    ActionForbiddenError:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          enum:
            - ActionForbiddenError
        message:
          type: string
          enum:
            - Principal can not execute action on given resource
        httpStatusCode:
          type: number
          enum:
            - 403
        traceId:
          type: string
        details:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              issue:
                type: string
              field:
                type: string
              value:
                type: string
              location:
                type: string
            required:
              - issue
      required:
        - name
        - message
        - httpStatusCode
        - traceId
  examples: {}
paths:
  /.well-known/jwks.json:
    get:
      operationId: getWellKnownJwks
      security: []
      responses:
        '200':
          $ref: '#/components/responses/GetWellKnownJwksOK'
        '500':
          $ref: '#/components/responses/GetWellKnownJwksUnexpectedError'
      tags:
        - well-known
  /v1/create-project-scoped-token:
    post:
      deprecated: true
      operationId: deprecatedCreateProjectScopedToken
      description: >-
        This is deprecated endpoint, please use
        /v1/sts/create-project-scoped-token
      security:
        - UserTokenAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/DeprecatedCreateProjectScopedToken'
      responses:
        '200':
          $ref: '#/components/responses/DeprecatedCreateProjectScopedTokenOK'
        '400':
          $ref: >-
            #/components/responses/DeprecatedCreateProjectScopedTokenBadRequestError
        '500':
          $ref: >-
            #/components/responses/DeprecatedCreateProjectScopedTokenUnexpectedError
      tags:
        - sts
  /v1/sts/create-project-scoped-token:
    post:
      operationId: createProjectScopedToken
      security:
        - UserTokenAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CreateProjectScopedToken'
      responses:
        '200':
          $ref: '#/components/responses/CreateProjectScopedTokenOK'
        '400':
          $ref: '#/components/responses/CreateProjectScopedTokenBadRequestError'
        '403':
          $ref: '#/components/responses/CreateProjectScopedTokenForbiddenError'
        '500':
          $ref: '#/components/responses/CreateProjectScopedTokenUnexpectedError'
      tags:
        - sts
  /v1/sts/whoami:
    get:
      operationId: whoami
      security:
        - UserTokenAuth: []
      responses:
        '200':
          $ref: '#/components/responses/WhoamiOK'
        '403':
          $ref: '#/components/responses/WhoamiForbiddenError'
        '404':
          $ref: '#/components/responses/WhoamiNotFoundError'
        '500':
          $ref: '#/components/responses/WhoamiUnexpectedError'
      tags:
        - sts
  /v1/projects:
    post:
      operationId: createProject
      security:
        - UserTokenAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CreateProject'
      responses:
        '200':
          $ref: '#/components/responses/CreateProjectOK'
        '400':
          $ref: '#/components/responses/CreateProjectBadRequestError'
        '500':
          $ref: '#/components/responses/CreateProjectUnexpectedError'
      tags:
        - projects
    get:
      operationId: listProject
      security:
        - UserTokenAuth: []
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListProjectOK'
        '500':
          $ref: '#/components/responses/ListProjectUnexpectedError'
      tags:
        - projects
  /v1/projects/users:
    post:
      deprecated: true
      operationId: addUserToProject
      security:
        - ProjectTokenAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/AddUserToProject'
      responses:
        '204':
          description: NoContent
        '400':
          $ref: '#/components/responses/AddUserToProjectBadRequestError'
        '403':
          $ref: '#/components/responses/AddUserToProjectForbiddenError'
        '500':
          $ref: '#/components/responses/AddUserToProjectUnexpectedError'
      tags:
        - projects
    get:
      deprecated: true
      operationId: listUsersOfProject
      security:
        - ProjectTokenAuth: []
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListUsersOfProjectOK'
        '400':
          $ref: '#/components/responses/ListUsersOfProjectBadRequestError'
        '403':
          $ref: '#/components/responses/ListUsersOfProjectForbiddenError'
        '500':
          $ref: '#/components/responses/ListUsersOfProjectUnexpectedError'
      tags:
        - projects
  /v1/projects/users/{userId}:
    delete:
      deprecated: true
      operationId: deleteUserFromProject
      security:
        - ProjectTokenAuth: []
      parameters:
        - in: path
          name: userId
          description: id of user
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Ok
        '400':
          $ref: '#/components/responses/DeleteUserFromProjectBadRequestError'
        '403':
          $ref: '#/components/responses/DeleteUserFromProjectForbiddenError'
        '500':
          $ref: '#/components/responses/DeleteUserFromProjectUnexpectedError'
      tags:
        - projects
  /v1/projects/principals:
    get:
      operationId: listPrincipalsOfProject
      security:
        - ProjectTokenAuth: []
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListPrincipalsOfProjectOK'
        '400':
          $ref: '#/components/responses/ListPrincipalsOfProjectBadRequestError'
        '403':
          $ref: '#/components/responses/ListPrincipalsOfProjectForbiddenError'
        '500':
          $ref: '#/components/responses/ListPrincipalsOfProjectUnexpectedError'
      tags:
        - projects
    post:
      operationId: addPrincipalToProject
      security:
        - ProjectTokenAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/AddPrincipalToProject'
      responses:
        '204':
          description: NoContent
        '400':
          $ref: '#/components/responses/AddPrincipalToProjectBadRequestError'
        '403':
          $ref: '#/components/responses/AddPrincipalToProjectForbiddenError'
        '500':
          $ref: '#/components/responses/AddPrincipalToProjectUnexpectedError'
      tags:
        - projects
  /v1/projects/principals/{principalId}:
    delete:
      operationId: deletePrincipalFromProject
      security:
        - ProjectTokenAuth: []
      parameters:
        - in: path
          name: principalId
          description: id of principal
          required: true
          schema:
            type: string
        - in: query
          name: principalType
          description: type of principal
          required: true
          schema:
            type: string
            enum:
              - user
              - machine_user
      responses:
        '204':
          description: Ok
        '400':
          $ref: '#/components/responses/DeletePrincipalFromProjectBadRequestError'
        '403':
          $ref: '#/components/responses/DeletePrincipalFromProjectForbiddenError'
        '500':
          $ref: '#/components/responses/DeletePrincipalFromProjectUnexpectedError'
      tags:
        - projects
  /v1/policies/users/{userId}:
    get:
      deprecated: true
      operationId: deprecatedGetPolicies
      security:
        - ProjectTokenAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/DeprecatedGetPoliciesOK'
        '400':
          $ref: '#/components/responses/DeprecatedGetPoliciesBadRequestError'
        '404':
          $ref: '#/components/responses/DeprecatedGetPoliciesNotFoundError'
        '500':
          $ref: '#/components/responses/DeprecatedGetPoliciesUnexpectedError'
      tags:
        - policies
    put:
      deprecated: true
      operationId: deprecatedUpdatePolicies
      security:
        - ProjectTokenAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/DeprecatedUpdatePolicies'
      responses:
        '200':
          $ref: '#/components/responses/DeprecatedUpdatePoliciesOK'
        '400':
          $ref: '#/components/responses/DeprecatedUpdatePoliciesBadRequestError'
        '500':
          $ref: '#/components/responses/DeprecatedUpdatePoliciesUnexpectedError'
      tags:
        - policies
  /v1/policies/principals/{principalId}:
    get:
      operationId: getPolicies
      security:
        - ProjectTokenAuth: []
      parameters:
        - in: path
          name: principalId
          required: true
          schema:
            type: string
        - in: query
          name: principalType
          required: true
          schema:
            type: string
            enum:
              - user
              - machine_user
      responses:
        '200':
          $ref: '#/components/responses/GetPoliciesOK'
        '400':
          $ref: '#/components/responses/GetPoliciesBadRequestError'
        '404':
          $ref: '#/components/responses/GetPoliciesNotFoundError'
        '500':
          $ref: '#/components/responses/GetPoliciesUnexpectedError'
      tags:
        - policies
    put:
      operationId: updatePolicies
      security:
        - ProjectTokenAuth: []
      parameters:
        - in: path
          name: principalId
          required: true
          schema:
            type: string
        - in: query
          name: principalType
          required: true
          schema:
            type: string
            enum:
              - user
              - machine_user
      requestBody:
        $ref: '#/components/requestBodies/UpdatePolicies'
      responses:
        '200':
          $ref: '#/components/responses/UpdatePoliciesOK'
        '400':
          $ref: '#/components/responses/UpdatePoliciesBadRequestError'
        '500':
          $ref: '#/components/responses/UpdatePoliciesUnexpectedError'
      tags:
        - policies
  /v1/machine-users:
    post:
      operationId: createMachineUser
      security:
        - UserTokenAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CreateMachineUser'
      responses:
        '200':
          $ref: '#/components/responses/CreateMachineUserOK'
        '400':
          $ref: '#/components/responses/CreateMachineUserBadRequestError'
        '500':
          $ref: '#/components/responses/CreateMachineUserUnexpectedError'
      tags:
        - machine-users
    get:
      operationId: listMachineUser
      security:
        - UserTokenAuth: []
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListMachineUserOK'
        '400':
          $ref: '#/components/responses/ListMachineUserBadRequestError'
        '500':
          $ref: '#/components/responses/ListMachineUserUnexpectedError'
      tags:
        - machine-users
  /v1/machine-users/{machineUserId}:
    get:
      operationId: getMachineUser
      security:
        - UserTokenAuth: []
      parameters:
        - in: path
          name: machineUserId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/GetMachineUserOK'
        '403':
          $ref: '#/components/responses/GetMachineUserForbiddenError'
        '404':
          $ref: '#/components/responses/GetMachineUserNotFoundError'
        '500':
          $ref: '#/components/responses/GetMachineUserUnexpectedError'
      tags:
        - machine-users
    patch:
      operationId: updateMachineUser
      security:
        - UserTokenAuth: []
      parameters:
        - in: path
          name: machineUserId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UpdateMachineUser'
      responses:
        '200':
          $ref: '#/components/responses/UpdateMachineUserOK'
        '403':
          $ref: '#/components/responses/UpdateMachineUserForbiddenError'
        '404':
          $ref: '#/components/responses/UpdateMachineUserNotFoundError'
        '500':
          $ref: '#/components/responses/UpdateMachineUserUnexpectedError'
      tags:
        - machine-users
    delete:
      operationId: deleteMachineUser
      security:
        - UserTokenAuth: []
      parameters:
        - in: path
          name: machineUserId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Machine User Deleted
        '403':
          $ref: '#/components/responses/DeleteMachineUserForbiddenError'
        '404':
          $ref: '#/components/responses/DeleteMachineUserNotFoundError'
        '500':
          $ref: '#/components/responses/DeleteMachineUserUnexpectedError'
      tags:
        - machine-users
